{"pages":[{"title":"一点一滴的博客","text":"​ 每次碰到问题都会度娘，谷歌个半天才解决，下次碰到问题说不定又忘记怎么解决了，所以需要个博客用来记录平时用到的操作步骤，以便下次忘记时随时查看。用过其他的博客，但是非常不爽：1.从登录开始到找到以前记录的文章为止，估计要好几分钟，流程太繁琐；2.窗口两边老是弹出广告窗口，非常讨厌；用github搭建个免费的博客挺好，只需要一个域名，这样下次查找东西方便。","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"Tagcloud","text":"","link":"/tags/index.html"}],"posts":[{"title":"2.4.1 基础知识——添加服务引用与Web引用的区别","text":"2.4 使用ASP.NET测试Web服务 Web服务的使用非常灵活和自由，在前面我们使用控制台应用程序调用了一个手动生成的Web服务，步骤比较繁琐，而且出现错误很难排除。这一节，我们看看利用Visual Studio 2010如何在ASP.NET中测试Web服务。 2.4.1 基础知识——添加服务引用与Web引用的区别 由于.NET Framework 4默认不再推荐Web服务，而是通过WCF来实现Web服务的功能。而.NET Framework 3.5两者都支持，因此在添加时存在一些差异。 在创建基于.NET Framework 4的项目或者网站时，右击项目或者网站名称，弹出的快捷菜单中只会出现【添加服务引用】命令，如图2-20所示。选择该项将打开【添加服务引用】对话框，在这里的【地址】下拉列表框中可以输入WCF的地址，再单击【前往】按钮。如图2-21所示为添加一个WCF服务引用时的对话框效果。 虽然，也可以通过Web服务的URL来添加服务引用。但是要注意，此方法不能保证Web服务的正常使用，因此不推荐使用。 不过，打开【添加Web引用】对话框并不复杂。在图2-21所示的对话框中单击【高级】按钮，然后从弹出的【服务引用设置】对话框中单击【添加Web引用】按钮即可，如图2-22所示。 下面我们来了解一下添加服务引用与添加Web引用的区别。 (1) 添加服务引用使用的是WCF服务，而添加Web引用使用的是Web服务。 (2) Visual Studio 2010在升级以后为了支持.NET Framework 3.0或3.5版本上的WCF Service Library，增加了添加服务引用功能。而对于Web服务从.NET Framework 1.0开始就支持。 (3) 同时存在添加服务引用与添加Web引用两者情况的项目类型是Web服务程序，包括Web Service项目。普通的控制台和窗体等类型是没有添加Web引用的。 (4) 使用添加Web引用后将由wsdl.exe生成客户端代理。而使用添加服务引用后生成客户端代理的命令是svcutil.exe。 (5) 添加Web引用生成的代理可以被.NET Framework 1.0或者.NET Framework 2.0的客户端调用。而添加服务引用生成的代理只能被.NET Framework 3.0以上的客户端调用，而且添加服务引用后不仅生成代理类，在web.config中还会生成相应的标记。 (6) 添加Web引用生成的Reference.cs文件里包含一个服务代理类，它负责与Web服务通信。它继承一个SOAP类，使用SOAP协议，基于XML语言。此外还包含一些Web服务类里定义的方法，和与之相关的异步调用方法和事件。遵守.NET Web Service的主要规则。 (7) 添加服务引用生成的客户端文件Reference.cs也会反序列化一个本地代理类，这点和前者相似。不过除了服务类和其相关的一些别的类和契约接口外，还有服务请求和相应的信息。遵循WCF服务框架的规则。 技术文档 WCF与Web服务的关系 严格地说，Web服务是行业标准，它有一套规范体系标准，而且在持续不断的更新完善中，也就是Web Service 规范，也称作WS-*规范，既不是框架，也不是技术。 微软的Web服务实现称为ASP.NET Web Service，它使用Soap来实现分布式环境里应用程序之间的数据交互，用WSDL来实现服务接口相关的描述。 WCF(Windows Communication Foundation)是一个分布式应用的开发框架，属于特定的技术，或者平台。既不是标准，也不是规范。WCF在一定程度上就是ASP.NET Web Service，因为它支持Web Service的行业标准和核心协议。因此ASP.NET Web Service能做的事情，WCF几乎都能胜任，跨平台和语言更不是问题。 但是WCF作为微软主推的一个通信平台，它的目标不仅仅是支持和集成Web Service，因为它还兼容和具备了微软早期很多分布式技术的特性。在本书的第13章将详细讨论WCF。","link":"/C-sharp/yidianyidi-1702281110.html"},{"title":"2020搬瓦工VPS使用方案","text":"搬瓦工VPS优惠码：BWH34QMFYT2R（全场立减6.38%，最高优惠了！）搬瓦工VPS优惠码2：BWH26FXH3HIQ（全场立减6.25%！）(查看搬瓦工官网全部配置方案）20GB KVM VPS 爆款 49.99美元/年 CPU：3x Intel Xeon 内存：2048MB 硬盘：40GB SSD 流量：2000GB 带宽：1Gbps 机房：洛杉矶CN2 直达购买 ​ 查看搬瓦工官网全部配置方案 搬瓦工购买教程 1.选择上方需要的VPS配置；或到官网选择配置2.核对配置以及选择购买期限Billing Cycle和机房Location；（搬瓦工优惠码：BWH34QMFYT2R，可减6.38%）3、登录或者新注册搬瓦工账户；4、完成支付，等待主机开通；（可用支付宝）5、登录搬瓦工后台，开始使用； 搬瓦工常见问题FAQ Q：bandwagonhost.com和bwh88.net是什么关系？ bandwagonhost.com是搬瓦工的官网(目前无法访问)，bwh88.net是官网镜像,可正常访问。 Q：CN2/CN2 GIA是什么？ A：CN2是中国电信的下一代通信网络，与直连线路比较：CN2具有高带宽、低延迟的优势。CN2也分为两种：CN2 GT和CN2 GIA，在没有特指的时候，CN2默认是CN2 GT线路。CN2 GIA是CN2的高端企业级VIP线路，体验非常良好。 Q：机房Location应该选哪个？ CN2机房Location建议选US - Los Angeles DC2 QNET (USCA_2)。 Q：可以安装Windows吗？ 无法安装Windows，可安装主流Linux系统，如CentOS、Ubuntu、FreeBSD等。 Q：系统重装或更换其他系统有限制吗？需要收费吗？ 搬瓦工VPS可[免费][无限次]重装或更换系统，可以任意切换各种系统。 Q：可以用远程桌面管理VPS吗？ 不可以，搬瓦工所有VPS均为Linux系统，需通过SSH进行连接和管理。 Q：连接SSH的工具推荐 推荐使用XShell、PuTTY、SecureCRT进行管理。 Q：VPS什么时候续费？可以一次买多年吗？ 搬瓦工采用国外通用的账单模式，不可以买多年。系统会在VPS到期后的一周内生成新账单并以邮件通知，在一周内续费即可。 Q：搬瓦工换ip(付费) 搬瓦工付费换ip地址 https://bwh88.net/ipchange.php （价格是波动的，目前是8.79美元）","link":"/vps-bwg/yidianyidi-2008210910.html"},{"title":"C#WinForm获取当前执行程序路径的几种方法","text":"1.获取和设置当前目录的完全限定路径。string str = System.Environment.CurrentDirectory;Result: C:xxxxxx 2.获取启动了应用程序的可执行文件的路径，不包括可执行文件的名称。string str = System.Windows.Forms.Application.StartupPath;Result: C:xxxxxx 3.获取新的 Process 组件并将其与当前活动的进程关联的主模块的完整路径，包含文件名。string str=System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;Result: C:xxxxxxxxx.exe 4.获取当前 Thread 的当前应用程序域的基目录，它由程序集冲突解决程序用来探测程序集。string str = System.AppDomain.CurrentDomain.BaseDirectory;Result: C:xxxxxx 5.获取应用程序的当前工作目录。string str = System.IO.Directory.GetCurrentDirectory();Result: C:xxxxxx 6.获取和设置包含该应用程序的目录的名称。string str = System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase;Result: C:xxxxxx 7.获取当前进程的完整路径，包含文件名。string str = this.GetType().Assembly.Location;Result: C:xxxxxxxxx.exe 8.获取启动了应用程序的可执行文件的路径，包括可执行文件的名称。string str = System.Windows.Forms.Application.ExecutablePath;Result: C:xxxxxxxxx.exe 9.可执行文件的启动路径string path=Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location); 在dll中有时需要使用主调用程序中的资源，这就要正确获取调用程序的文件名及其路径等信息。这需要和调用dll本身的文件名和路径区分开来！这就牵扯到System.Reflection.Assembly程序集类使用了。 GetExecutingAssembly ： 获取包含当前执行的代码的程序集GetCallingAssembly ： 返回调用当前正在执行的方法的方法的 System.Reflection.AssemblyGetDirectoryName：返回指定路径字符串的目录信息","link":"/C-sharp/yidianyidi-1702101559.html"},{"title":"DataGridView绑定list的注意事项","text":"1、DataGridView数据绑定对比（DataTable与泛型List）： 当DataGridView的DataSource是DataTable的时候，DataTable的数据改变时，DataGridView的数据会随之改变，无需重新绑定到DataGridView。 当DataGridView的DataSource是泛型List，当List的数据改变时，则需要先将DataGridView的DataSource设置为new List()，再将改变后的List赋给DataGridView的DataSource。 绑定List时，注意：切莫将DataGridView的DataSource设置为Null，否则会破坏DataGridView的列结构。 2、数据绑定后的添加删除问题： 如果要对绑定在DataGridView中的List进行数据的添加删除，先要把List转换成BindingList，再进行绑定：DataGridView.DataSource=new BindingList(new List)。否则的话会产生许多意想不到的错误。如：初始绑定空数据后再添加数据绑定后，却取不到DataGridView.CurrentCell属性；删除list的内容后，再调用DataGridView报在0处没有索引。 3、使用泛型绑定依然可以添加删除： IList list= new List(); DataGridView.DataSource=list;//DataGridView的行不能添加删除 DataGridView.DataSource=new BindingList(list);//DataGridView的行可以添加删除（只有允许添加行、删除行）","link":"/C-sharp/yidianyidi-1701211131.html"},{"title":"Hexo + Github 搭建个人博客","text":"试试用Node.js的Hexo和Github来搭建个人博客，免去了维护服务器等问题，而且完全免费！ 文档 Hexo文档：https://hexo.io/zh-cn/docs/ Next文档：http://theme-next.iissnan.com/getting-started.html 环境准备 Git Node.js Windows下安装部署安装GitWindows下安装其实还是蛮简单的，全部默认，下一步，就好了。 安装Node.js一样，默认选择加下一步。 安装结果检查Windows下启动命令行或PowerShell。分别输入： 123&gt; node -v&gt; npm -v&gt; git --version 如果结果显示如下图，则说明各环境安装正确，可以进行后续操作。 Github设置先在 https://github.com/ 注册一个账户，注册好后，登录，创建代码库。登录后，选择界面右上角“+”号下拉，或者点击界面右侧的“New repository”， 进入代码库创建界面，在Repository name栏写yourname.github.io（yourname为你github账户名称） 代码库创建成功之后，自动跳到项目的代码库管理界面： 选择界面右侧的Settings选项卡，进入后，下拉，可以看到GitHub Pages一栏：这里就是创建Pages的地方，保存即可；保存后在这里可以自定义自己的域名，将yoursite.github.io转向自己的域名。 配置Git以上传远程服务器首先配置自己账户的身份信息，Git bash中输入： 12$ git config --global user.name &quot;yourname&quot;$ git config --global user.email &quot;youremail&quot; Github上传采用SSH密钥的方式，生成密钥： 1$ ssh-keygen -t rsa -C &quot;youremail&quot; 提示选择全默认，按三次回车即可，之后会在当前用户目录下生成一个文件夹.ssh里面有两个文件id_rsa和id_rsa.pub。接着进入Github，登录，进入用户设置setting,选择左侧的SSH and GPG keys,点击New SSH key；用文本工具打开id_rsa.pub，将内容拷贝到Github中的Key中，Title任意写，保存即可。 测试是否连接通github.com: 1$ ssh -T git@github.com 返回 1Hi yourname! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 说明连接成功！ 安装配置Hexo在当前用户家目录下有个文件.npmrc这里存放nodejs的一些配置，我们将源镜像改为淘宝镜像，加快访问速度；将插件安装路径改为自己想要的路径，否则，默认hexo会安装在用户目录下的\\AppData\\Roaming下。 打开.npmrc文件，输入： 12registry=https://registry.npm.taobao.org/prefix=D:\\Program Files\\nodejs 启动Git Bash命令行。我把Hexo安装在D:\\nodejs目录里。在命令行中输入： 1$ npm install hexo-cli -g 可能会有WARN，不用理会，继续输入检查是否安装成功： 1$ hexo -v 如果得到： 1234567891011hexo-cli: 1.0.2os: Windows_NT 10.0.14393 win32 x64http_parser: 2.7.0node: 6.9.4v8: 5.1.281.89uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 57.1modules: 48openssl: 1.0.2j 则说明安装成功。 部署博客项目在本地目录新建一个文件夹（博客项目），右键选择Git Bash Here,启动Git Bash命令行。 初始化Hexo在Git Bash命令行输入： 1$ hexo init 等初始化完成，再输入： 1$ npm install npm自动安装依赖的组件。部署前需要安装一个扩展： 1$ npm install hexo-deployer-git --save 启动Hexo命令行中，继续输入,以生成静态博客站： 1$ hexo g #或 hexo generate 启动web服务，输入： 1$ hexo s #或 hexo server 在浏览器中打开 http://localhost:4000/ ，就可以看到运行效果。 Hexo的常用命令12345678910$ hexo clean #清空缓存db.json和public文件夹$ hexo generate #简写：hexo g 生成静态文件，会在当前目录下生成一个新的 public 文件夹$ hexo server #简写：hexo s 启动本地web服务，可以预览站点$ hexo deploy #简写：hexo d 部署到远程服务器（比如github等平台）$ hexo new &quot;artical name&quot; #简写：hexo n 新建文章$ hexo new page &quot;page name&quot; #新建页面Hexo的常用组合命令$ hexo d -g #生成并部署到远程服务器$ hexo s -g #生成并启动web服务 Hexo主题修改Hexo 默认的主题基本都不会喜欢，流行的一款主题是Next可以在 https://github.com/iissnan/hexo-theme-next 获取。 将下载的主题改名为next,拷贝到博客目录的themes文件夹下，修改博客站点目录下的_config.yml配置文件，找到theme,修改为： theme: next注意：Yaml配置文件的键值对冒号后面有空格，否则配置异常；可以去 http://www.yamllint.com/ 校验配置文件的有效性。重新执行启动预览： 12$ hexo clean$ hexo s -g 全局配置文件站点下的_config.yml为全局配置文件，在主题目录下也有一个同名配置文件。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/## 键值对，键: 值 注意键后面冒号要空一格再写值，否则异常# Sitetitle: 博客名 #标题博客名subtitle: 副标题 #副标题description: 关键字、描述 #给搜索引擎用，对站点的描述author: 作者 #网站底部的作者名称language: zh-CN #语言email: yourname@xxx.com #联系邮箱timezone: Asia/Shanghai #时区,Hexo 默认使用您电脑的时区; #时区列表:https://en.wikipedia.org/wiki/List_of_tz_database_time_zones# URL 网址## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/ #生成文件名字的格式permalink_defaults:# Directory 目录配置source_dir: source #源文件夹，这个文件夹用来存放内容。public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #include code 文件夹i18n_dir: :lang #国际化（i18n）文件夹skip_render: #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。# Writing 文章new_post_name: :title.md #新文章文件名default_layout: post #默认布局titlecase: false #标题转化成大写external_link: true #在新标签里打开链接filename_case: 0 #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。render_drafts: false #是否渲染_drafts目录下的文章，默认为falsepost_asset_folder: false #启动Asset文件夹relative_link: false #把链接改为与根目录的相对位址，默认falsefuture: true #显示未来的文章，默认falsehighlight: #代码块设置 enable: true line_number: true #显示行号 auto_detect: true tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map: #分类别名tag_map: #标签别名# Date / Time format #日期时间格式## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination #分页## Set per_page to 0 to disable paginationper_page: 10 #每页文章数，设置成0禁用分页pagination_dir: page #分页目录# Extensions #插件和主题## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment #部署## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:yourname/yourname.github.io.git branch: master","link":"/Hexo/yidianyidi-1708121150.html"},{"title":"Hexo设置自定义指定首页","text":"Hexo搭建的博客，网址输入后直接打开的是自己想要的某个文章页面，查了半天，有解决方法了。Confirming that simply creating an index.md file in the my-site/source folder allows me to change the homepage. I still wished to have a page which listed my most recent blog posts. So in my my-site/_config.yml I put index_generator: #path: ‘’ # DELETE path: ‘/blog’After creating the file (and running hexo g hexo s), when I access localhost:4000, I get my custom homepage. And then when I access localhost:4000/my-site/blog, I get the “original” homepage listing my blog posts. I did not need to npm uninstall hexo-generator-index. I also did not need to create an html file, and did not need to do what @MoezGholami says above. hexo: 3.7.1hexo-cli: 1.1.0 总之就两步操作：1.在网站my-site/source目录下创建index.md文件2.修改index_generator下面的path值为’/blog’设置后重新运行网站，打开后浏览博客Home页就是设置的index.md写的内容","link":"/Hexo/yidianyidi-19101113.html"},{"title":"Hexo配置 优化SEO","text":"SEO（搜索引擎优化），参考网上一些教程，Hexo的主题做SEO的一些小技巧： Hexo优化准备主站文件配置主站配置文件中的这四项一定要填写！ title: #标题subtitle: #子标题description: #描述url: #url打开Next主题自带的seo配置打开主题配置文件中的这些项目。 canonical: trueseo: trueindex_with_subtitle: truebaidu_push: true 添加sitemap这一步目的在于告诉搜索引擎你的站点结构。 sitemap生成插件的安装和配置npm install hexo-generator-sitemap –savenpm install hexo-generator-baidu-sitemap –save在站点配置文件中添加sitemap的生成路径 sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml现在执行 hexo g 生成以后应该可以访问sitemap.xml和baidusitemap.xml 提交sitemap分别到谷歌和百度的站长工具网站上提交sitemap就可以了。如果不主动提交sitemap，搜索引擎可能无法自己找到sitemap，即使找到，速度也会很慢。github好像屏蔽了百度的爬虫，所以即使提交了sitemap，也可能出现无法爬下来的情况。于是我们需要主动向百度提交链接。安装插件hexo-baidu-url-submit npm install hexo-baidu-url-submit –save在站点配置文件中添加如下内容： baidu_url_submit: count: 1 ## 提交最新的一个链接 host: ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里在站点配置文件的deploy下仿照github的类型添加： type: baidu_url_submitter执行hexo d的时候就会自动推送新链接了 robots文件在your-hexo-site\\source中新建robots.txt，告诉搜索引擎，哪些是可以爬的，哪些是不可以爬的，格式如下： #hexo robots.txtUser-agent: * Allow: /Allow: /archives/Allow: /categories/Allow: /tags/ Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/ Sitemap: https://hjptriplebee.github.io/search.xmlSitemap: https://hjptriplebee.github.io/sitemap.xmlSitemap: https://hjptriplebee.github.io/baidusitemap.xml修改文章链接hexo默认的url形式是按日期来的多重结构，过长的url不利于搜索。可以将站点配置文件作如下修改： permalink: :title.htmlnofollow标签可以添加的地方太多了，非友情链接都可以添加如下标签： rel=”external nofollow”","link":"/Hexo/yidianyidi-1910111716.html"},{"title":"SqlServer使用ip无法登陆","text":"装完vpn后出现sqlserver用ip模式登陆不了。提示：已成功与服务器建立连接，但是在登录过程中发生错误。 (provider: SSL Provider, error: 0 - 远程主机强迫关闭了一个现有的连接。) (Microsoft SQL Server，错误: 10054) 以为被软件修改了默认端口，通过sql语句查询端口还是1433没有变化。打开sqlserver配置管理器时，提示无法及时建立与目标计算机的连接，然后各种百度搜索… 解决方法： 1.直接卸载vpn后，sqlserver恢复正常。 2.可能是因为安装某网络软件之后影响了电脑的LPS，在命令行里执行netsh winsock reset重置命令然后重启电脑，问题解决。 听说360安全卫士之类的软件带了LPS修复功能，应该也能解决。但是我360修复的时候卡死了，估计没修复完成。 LSP是什么LSP是什么？LSP的中文名叫分层服务提供程序，是TCP/IP等协议的接口。浏览器，聊天工具等等都要通过这个接口来获取相应的信息，LSP的功能就相当于生活中的插座。当LSP出现异常时，这个调用的接口就没办法正常工作，就会出现只能上qq不能打开网页，巨盾拦拦不能使用或者一些网游加速器无法正常使用的情况。 netsh winsock reset命令，作用是重置 Winsock 目录。如果一台机器上的Winsock协议配置有问题的话将会导致网络连接等问题，就需要用netsh winsock reset命令来重置Winsock目录借以恢复网络。这个命令可以重新初始化网络环境，以解决由于软件冲突、病毒原因造成的参数错误问题。 netsh是一个能够通过命令行操作几乎所有网络相关设置的接口，比如设置IP，DNS，网卡，无线网络等，Winsock是系统内部目录，Winsock是Windows网络编程接口，winsock工作在应用层，它提供与底层传输协议无关的高层数据传输编程接口，reset是对Winsock的重置操作。当执行完winsock的命令重启计算机后，需要重新配置IP。","link":"/DataBase/yidianyidi-180824.html"},{"title":"VS2015 IIS Express 无法启动 解决办法","text":"碰到一问题，就是在VS2015启动调试时，总是提示“IIS Web Express 无法启动”的错误，其他项目运行正常，就这个项目跑不起来，所以基本就是配置问题，网上的办法都试了，我试了都没用。现在说说我的解决办法 123用记事本或者其他什么文本编辑器，打开项目的.csproj文件，定位到&lt;WebProjectProperties&gt;，把关于IIS的配置&lt;DevelopmentServerPort&gt;、&lt;DevelopmentServerVPath&gt;、&lt;IISUrl&gt;属性都清空，&lt;AutoAssignPort&gt;为True，保存，重新用VS2015打开项目，然后Ctrl+F5，成功！ 原理就是让VS2015重置一下启动配置。","link":"/C-sharp/yidianyidi-1701231606.html"},{"title":"VirtualBox修改UUID实现vdi文件复制","text":"1.使用现有的vdi文件创建新虚拟机系统时,出现错误： 根据错误提示，原来我们直接复制vdi文件是复制了一个完全相同的虚拟硬盘镜像文件,包括硬盘的UUID。相同uuid在virtualbox是不允许的。所以解决的方法是改变新复制vdi虚拟硬盘镜像文件的uuid。修改vdi的uuid,使用如下命令： VBoxManage internalcommands sethduuid “F:\\VirtualBox\\xp娱乐学习\\new xp.vdi”注意：VBoxManage命令位于VirtualBox安装目录下，缺省路径是C:\\Program Files\\Sun\\xVM VirtualBox。使用时先在cmd窗口进入VirtualBox安装目录：cd C:\\Program Files\\Sun\\xVM VirtualBox","link":"/VirtualBox/yidianyidi-1702091940.html"},{"title":"adobe打印参数设置","text":"Adobe阅读器 我如何在Acrobat和Adobe阅读器中使用 Windows 命令行？ ( 适用于 Adobe acrobat/reader 10，而非 XI ) 用于显示对话框的命令是： 1start&quot;Print PDF&quot;/wait&quot;%ProgramFiles(x86)%AdobeReader 11.0ReaderAcroRd32.exe&quot;/p&quot;%%p&quot; 我认为，如果应该显示打印对话框，使用选项 /h 来有启动Adobe读取器是不用的。 要打印到特定打印机，要使用的命令行 就像 1start&quot;Print PDF&quot;/wait/min&quot;%ProgramFiles(x86)%AdobeReader 11.0ReaderAcroRd32.exe&quot;/t&quot;%%p&quot;&quot;printername&quot;&quot;drivername&quot;&quot;portname&quot; /wait 暂停批处理作业的执行，直到Adobe读取器自行终止。 如果应用程序不重写并显示最大化的窗口，则选项 /min 会使用最小化窗口执行GUI应用程序。 SumatraPDFi的SumatraPDF手册是 up-to-date，因为它在Sumatra的文档中链接了参数页面 page 。 Wiki页面最近更新，包含关于打印选项的不同信息。 -print-to-default将这里 命令行 上指示的所有文件打印到系统默认打印机。 打印后，SumatraPDF立即退出( 检查错误代码是否失败) 。因这里，可以使用 命令行 打印多个文件，使用SumatraPDF调用，使批处理文件更有效。 由于没有安装 SumatraPDF，我建议先尝试使用 3行的批处理文件 123&quot;%ProgramFiles(x86)%SumatraPDFSumatraPDF.exe&quot; -print-to-default&quot;Full Path and Name of a PDF file&quot;echo Exit code of SumatraPDF is: %ERRORLEVEL%pause 下一批批处理文件输出。 是否显示错误，或者是否按预期打印PDF文件？打印完成前，控制台窗口中的第二行？如果这样，SumatraPDF将作为单独的进程启动，并且退出代码评估并不真正可能。 否则，你已经有了使用。但是如果SumatraPDF作为单独的( GUI ) 进程启动，那么很有可能需要使用命令 start 和选项 /wait，如上面所示，也可能是。 注意：小批处理文件顶部没有 @echo off 可以测试以查看执行批处理文件的命令。 循环查看 FOR 循环代码时，将空格字符指定为分隔符是错误的，这对于文件路径/名称不好。 另外，空间字符是默认的命令 FOR 分隔符，因这里不必将它显式定义为分隔符。 因此我建议使用 1234@for/F&quot;delims=&quot; %%p in (&apos;dir&quot;Y:*.pdf&quot;/b/a-d/s&apos; 2^&gt;nul) do (&quot;%ProgramFiles(x86)%SumatraPDFSumatraPDF.exe&quot; -print-to-default&quot;%%p&quot;) 使用 “delims=”，分隔符列表只更改为换行符。 因这里 %%p 始终是一个文件的整个路径和 NAME，即使在命令 dir 中存在 1个或者多个空格。 如果没有将错误消息重定向到设备 NUL，2^&gt;nul 将禁止在整个驱动器 Y: 上找到命令 dir的错误消息。","link":"/C-sharp/yidianyidi-2008201514.html"},{"title":"centos7 添加用户并授权root权限","text":"centos7.2 版本，我们不可能每次都用root账号登陆，root账号公认的不安全，所以，首先，禁止掉root账号的登陆。1.静止root账号登陆。 123456$ vi /etc/ssh/sshd.conf （ssh服务的配置文件，直接修改）----------------------------------PermitRootLogin no ( 找到这一行，并将其改为 no )---------------------------------------保存退出$ systemctl restart sshd （重启一下sshd服务） 2.创建用户并授权 12345678910$ adduser sss （创建用户sss）$passwd sss （创建sss的密码）$ chmod -v u+w /etc/sudoers （增加 sudoers 文件的写的权限，默认为只读）$ vi /etc/sudoers （修改 sudoers）-------------------------------------------------------## Allow root to run any commands anywhereroot ALL=(ALL) ALLsss ALL=(ALL) ALL （添加这一行）-------------------------------------------------------保存，退出 1234567891011ps:这里说下你可以sudoers添加下面四行中任意一条youuser ALL=(ALL) ALL %youuser ALL=(ALL) ALL youuser ALL=(ALL) NOPASSWD: ALL %youuser ALL=(ALL) NOPASSWD: ALL# 第一行:允许用户youuser执行sudo命令(需要输入密码). # 第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码). # 第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码. # 第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码. ‘$ chmod -v u-w /etc/sudoers （删除 sudoers 的写的权限）‘好了，现在账号已经创建好了，使用sss账号登陆后，在命令前加 sudo 则是使用root权限了。第一次使用会弹出一些提示信息，正常现象。","link":"/linux/yidianyidi-201910290901.html"},{"title":"docker container 端口无法访问","text":"&emsp;&emsp;docker容器端口已经映射到宿主机端口情况下，局域网机器却不能ping通，或者局域网能ping通，容器ping到宿主机却不通。尝试方法： 两种防火墙（firewalld.service或iptables）打开或者关闭的时候都试过，问题未完全解决；防火墙开启后，部分容器在局域网能ping通,部分容器局域网却不能ping通；防火墙关闭后，部分容器在局域网能ping通,部分容器局域网却不能ping通，刚好跟上面的情况相反；经过测试，偶然机会下发现创建多个Network Intance 12345678[root@localhost ~]# docker network lsNETWORK ID NAME DRIVER SCOPEf48432fd385f bridge bridge localc3c9a16784be host host localdd5b7a67a6e3 net888 bridge local6ce943ed9ec0 net999 bridge local55f0e14cfa51 none null localc005b7ce16e8 staticnet bridge local &emsp;&emsp;因为需要设置容器的固定ip，’staticnet’自己创建的网络模式，经常使用的是’staticnet’网络模式，多次创建容器然后再创建其他容器，上面多次开启关闭防火墙测试的也是这个网络模式下的容器；可能是这个模式下使用同个ip创建容器或者防火墙配置哪里出问题了，导致局域网其他电脑不能ping通该容器，或者该容器不能连接局域网，经过很久百度都没解决问题，偶然机会下，发现创建新的网络模式下，用新的网络模式创建的容器却没有上面的问题。 &emsp;&emsp;后面测试就创建了其它bridge网络模式’net888’、’net999’，在该网络模式下创建的容器经过测试，防火墙开启后，容器都能连接到宿主机，局域网也能连接到容器中；具体原因虽然不知道，但好歹有解决方法了。","link":"/docker/yidianyidi-201910240947.html"},{"title":"docker安装","text":"一、安装docker。官方教程：https://docs.docker.com/engine/install/centos/ $ uname -r 卸载旧版本Docker 的旧版本名称为：docker 、 docker-engine 或者 docekr-io。如果安装过旧版本的需要先卸载：1234567891011$ sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine \\ docker.io 安装最新版本的 Docker最新版本的 Docker 分两个版本，docker-ce(Community Edition)和docker-ee(Enterprise Edition)。CE版本是免费的，如果我们学习或者一般应用，CE足够。我们安装社区版。 2.1. 安装依赖的软件包 $ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 2.2 设置稳定版仓库 #添加官方数据源 $ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo # 添加阿里云数据源 $ sudo yum-config-manager \\ --add-repo \\ https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 2.3 安装 $ sudo yum list docker-ce --showduplicates | sort -r # 列出可以安装的docker版本 $ sudo yum install docker-ce # 下载最新版本 $ sudo yum install -y docker-ce-18.03.1.ce-1.el7.centos # 安装指定版本 2.4 启动Docker $ sudo systemctl start docker # 启动 或者 $ sudo service start docker # 启动 $ sudo systemctl stop docker $ sudo systemctl restart docker $ sudo docker run hello-world # 检查docker运行正常 2.5 检查docker是否安装成功 $ docker --version # 查看安装的docker版本","link":"/docker/yidianyidi-2008201536.html"},{"title":"docker查看容器的网络ip","text":"1.通过容器名或者id查看对应的ip： docker inspect -f &apos;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&apos; container_name_or_id可直接获得容器的ip地址如：172.18.0.4 2.显示所有容器IP地址： docker inspect --format=&apos;{{.Name}} - {{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&apos; $(docker ps -aq) 常用方法有两种, 方法一 docker inspect 容器ID | grep IPAddress方法二查看docker name： sudo docker inspect -f=&apos;{{.Name}}&apos; $(sudo docker ps -a -q)查看dockers ip： sudo docker inspect -f=&apos;{{.NetworkSettings.IPAddress}}&apos; $(sudo docker ps -a -q)综上，我们可以写出以下脚本列出所有容器对应的名称，端口，及ip docker inspect -f=&apos;{{.Name}} {{.NetworkSettings.IPAddress}} {{.HostConfig.PortBindings}}&apos; $(docker ps -aq)","link":"/docker/yidianyidi-2008201625.html"},{"title":"rdlc报表打印提示找不到相关文件","text":"Microsoft.ReportViewer.ProcessingObjectModel, Version=10.0.0.0 未能加载文件或程序集 Microsoft.ReportViewer.ProcessingObjectModel, Version=10.0.0.0cound’t find the file Microsoft.ReportViewer.ProcessingObjectModel, Version=10.0.0.0 系统找不到指定的文件 解决方案：下载 Microsoft Report Viewer 2010 SP1 Redistributable Package得到文件 ReportViewer.exe,直接安装文件 ReportViewer.exe 后会自动注册找不到的dll。 &emsp;&emsp;到微软下载Microsoft ReportViewer 2010 SP1 Redistributable在应用服务器上安装，Microsoft.ReportViewer.ProcessingObjectMode.dll会在系统内自动注册解决问题；如果不想在应用服务器上安装，可以直接将Microsoft.ReportViewer.ProcessingObjectModel.dll文件拷贝到应用服务器的Bin目录内。Microsoft.ReportViewer.ProcessingObjectMode.dll文件可以在你安装过Microsoft ReportViewer 2010 SP1 Redistributable的开发机上的c:\\windows\\assembly\\GAC_MSIL\\Microsoft.ReportViewer.ProcessingObjectMode目录内找到。","link":"/C-sharp/yidianyidi-1910121308.html"},{"title":"vs2017删除代码中空行","text":"vs2017删除代码种空行： 用Ctrl+H配合正则表达式来替换空行或者空格 1.只有单独一行换行符时没有其他空格符号：(?&lt;=\\r\\n)\\r\\n；2.前面有两个制表符，再加一个换行符：\\t\\t\\r\\n 其他好多种情况可以另外再试。","link":"/C-sharp/yidianyidi-171122.html"},{"title":"在同一台电脑上配置多个git账号","text":"最近项目需要在同一台电脑上配置多个Git账号，记录下具体配置过程。主要包括以下两种情况1：配置多个不同主机的git账号假设是配置一个是oschina下的A账号，另一个是github的B账号。生成和密钥和服务器建立可信连接。需要注意的是配置多个账号生成密钥需要更改名称，不能为默认的id_rsa这种。假设生成的A账号密钥为id_rsa_A，B为id_rsa_B。注：生成密钥时最好是在.ssh目录下，因为生成非默认密钥，会存在当前目录。在~/.ssh目录下保存所有生成的密钥，建立config文件。config文件内容如下：Host git.oschina.NETHostName git.oschina.NetUser XXXIdentityFile ~/.ssh/id_rsa_A Host github.comHostName github.comUser XXXIdentityFile ~/.ssh/id_rsa_B完成之后，即可正常的操作不同主机的git账号。 2：配置多个相关主机下的不同git账号假设是配置一个是oschina下的A账号，另一个B账号。生成和密钥和服务器建立可信连接。需要注意的是配置多个账号生成密钥需要更改名称，不能为默认的id_rsa这种。假设生成的A账号密钥为id_rsa_A，B为id_rsa_B。注：生成密钥时最好是在.ssh目录下，因为生成非默认密钥，会存在当前目录。在~/.ssh目录下保存所有生成的密钥，建立config文件。config文件内容如下：Host AHostName git.oschina.netUser XXXIdentityFile ~/.ssh/id_rsa_A Host BHostName github.comUser XXXIdentityFile ~/.ssh/id_rsa_B 配置完成之后，假设从远程主机克隆项目到本地。原来路径为：git@github.com:hufeng903/phpexcel.git，现在需要修改为对应的主机名如:git@A:hufeng903/phpexcel.git。","link":"/Git/yidianyidi-1702091934.html"},{"title":"多github帐号的SSH key配置过程","text":"多github帐号的SSH key配置过程有两个github帐号，一个是个人所用，一个是为公司项目所用。如果是单用户(single-user)，很方便，默认拿id_rsa与你的github服务器的公钥对比;如果是多用户（multi-user）如user1,user2,那么就不能用在user2的身上了，这个时候就要配置一下了： 1、新建user2的SSH Key 12345#新建SSH key：$ cd ~/.ssh # 切换到C:\\Users\\Administrator\\.sshssh-keygen -t rsa -C &quot;mywork@email.com&quot; # 新建工作的SSH key# 设置名称为id_rsa_workEnter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): id_rsa_work 2、新密钥添加到SSH agent中 因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中： ssh-add ~/.ssh/id_rsa_work如果出现Could not open a connection to your authentication agent的错误，就试着用以下命令： ssh-agent bashssh-add ~/.ssh/id_rsa_work 12345678910Ensure ssh-agent is enabled:If you are using Git Bash, turn on ssh-agent:# start the ssh-agent in the backgroundssh-agent -s# Agent pid 59566If you are using another terminal prompt, such as msysgit, turn on ssh-agent:# start the ssh-agent in the backgroundeval $(ssh-agent -s)# Agent pid 59566 3、修改config文件在~/.ssh目录下找到config文件，如果没有就创建： touch config # 创建config然后修改如下：我的config配置如下： 1234567891011121314151617181920# 该文件用于配置私钥对应的服务器# Default github user(first@mail.com)Host github.com HostName github.com User git IdentityFile C:/Users/Administrator/.ssh/id_rsa # second user(second@mail.com) # 建一个github别名，新建的帐号使用这个别名做克隆和更新Host github2 HostName github.com User git IdentityFile C:/Users/Administrator/.ssh/id_rsa_work如果存在的话，其实就是往这个config中添加一个Host：#建一个github别名，新建的帐号使用这个别名做克隆和更新Host github2HostName github.comUser gitIdentityFile ~/.ssh/id_rsa2 其规则就是：从上至下读取config的内容，在每个Host下寻找对应的私钥。这里将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名如：github2，那么原地址是：git@github.com:funpeng/Mywork.git，替换后应该是：github2:funpeng/Mywork.git. 4、打开新生成的~/.ssh/id_rsa2.pub文件，将里面的内容添加到GitHub后台。 可不要忘了添加到你的另一个github帐号下的SSH Key中。 5、测试： Administrator@FANGPENG /e/work$ ssh -T git@github.comHi BeginMan! You’ve successfully authenticated, but GitHub does not provide shell access. Administrator@FANGPENG /e/work$ ssh -T github2Hi funpeng! You’ve successfully authenticated, but GitHub does not provide shell access.6、应用 测试成功，那么我尝试在我的work目录下克隆我@126.com账号下的远程仓库。如下： Administrator@FANGPENG /e/work$ git clone github2:funpeng/Mywork.gitCloning into ‘Mywork’…remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Receiving objects: 100% (3/3), done.Checking connectivity… done克隆成功，大功告成了！","link":"/Git/yidianyidi-1702091946.html"},{"title":"安装win7系统时如何不产生100M的系统保留分区","text":"如果你是从xp系统升级安装，或者重新安装win7系统，应该不会出现所谓的100M系统保留分区情况。 这里说的安装指的的对新的磁盘或者删除了老的所有分区后的安装win7系统。 第一种方法：利用第三方分区工具先对磁盘进行分区。没有第三方工具，利用xp安装盘，进行磁盘分区也行。只要分区格式化就可以了，没有必要安装xp系统。 注：要用xp盘对C盘进行格式化，并且在装win7系统的时候，不能再对C盘格式化。 第二种方法：使用win7的diskpart命令进行分区，详细步骤： 1、在安装win7系统到分区这一步的时候，按住shift+F10调出命令行窗口 2、输入命令：diskpart ###启动diskpart 3、输入命令：list disk ###查看所有磁盘，一般情况下，都只有一个磁盘，列表里也只会列出一项 磁盘0 4、输入命令：select disk 0 ###选择要操作的磁盘，并将该磁盘设置为当前操作磁盘，只有一块磁盘的话，选择0，如果你有多个磁盘的话，自己根据需要进行选择 5、输入命令：clean ###清除该磁盘上的所有分区 6、输入命令：create partition primary size=20480 ###创建主分区，size默认单位MB，不加size则会将剩余的所有磁盘空间创建为一个主分区，扩展与逻辑分区类似 7、输入命令：active ###将当前主分区标为要操作的主分区 8、输入命令：format quick ###快速格式化分区 如果你准备创建多个主分区，那么重复6、7、8步骤就可以了，如果只创建一个主分区，继续下面的步骤 9、输入命令：create partition extended ###将剩余空间全部创建为扩展分区 10、输入命令：create partition logical ###将扩展分区的全部剩余空间创建为一个逻辑分区，你也可以指定size参数，将剩余空间创建出多个逻辑分区 11、输入命令：format qucik ###快速格式化该逻辑分区 12、输入命令：exit ###退出diskpart 13、输入命令：exit ###退出命令行窗口 回到win7安装分区步骤，点击刷新，选择你要安装的磁盘分区进行安装就可以了。 注：这里不要再格式化了","link":"/Computer/yidianyidi-1702101634.html"},{"title":"宿主机使用虚拟机的VPN连接","text":"需求VMware虚拟机中跑Windows 7（下文称Guest），使用某客户端连接公司VPN，宿主机为Windows 10（下文称Host），未安装该VPN客户端。现需要在Guest中连接VPN，然后共享给Host使用。 实现 Guest添加2块网卡，一个Host Only，一个桥接。网络编辑器中取消Host Only的DHCP功能 Guest连接VPN Guest设置VPN网络适配器属性，将连接共享给Host Only网卡 Guest的Host Only网卡IP将被设置为 192.168.137.1 Host的VMnet1（Host Only网卡）指定一个和192.168.137.1同网段的IP Host管理员权限添加公司内网网段路由： route add 10.0.0.0 mask 255.0.0.0 192.168.137.1 参考资料So, the host has a public physical connection but it will be the private end of the ultimate configuration? The guest bridges to the host’s NIC uses the available default route off the host’s cabling (though the host doesn’t have that route). The guest is XP, the host Linux. In this case I’d try hard to use NAT but, since the router is the guest, I’d probably use Windows ICS since it is so easy to forward on an interface of choice (the VPN one).It will require two NICs, one for the host to guest (I’d use VMnet1 (host only) or add a host virtual adapter with no DHCP server on it) and one for the guest to physical cabling (bridged and the VPN client uses it – how it gets a routable IP to run the VPN over).Enabling ICS on the guest for the NIC using VMnet1 will give it a static IP address (probably 192.168.0.1) and enable the DHCP server. If you disable the VMWare DHCP server on VMnet1 (or add another virtual adapter to the host, say VMnet2 and use it for the private NIC on the host) then just let it get an IP address via DHCP and ICS will assign it one. With this setup the host should have only one default route, it should be through the guest, via NAT and it should be over the VPN.I’ve described it a bit briefly but it is not too weird or complicated.Message was edited by:dmairhttps://communities.vmware.com/thread/27120?start=0&amp;tstart=0","link":"/VirtualBox/yidianyidi-1708121150.html"},{"title":"想要月入10万以上？？那就把它背下来！","text":"是什么限制了你的能力？ 1：否定性思想 比如：不可能、没办法、怎么会？没想过、不知道等等，这些词汇会让你的大脑停止思考，不会再为结果找答案。没方法等于没能力。 2：推卸责任 比如：没看见、不知道、不是我的错、因为···所以···，这些词汇会让一个人心安理得的让这件事情和自己没关系，损失了很多次成长的机会。 3：金钱 金钱会锁定一个人的能力，不给钱就不干活，钱给的少就不去做，久而久之自己丧失了赚钱的能力。 4：职责局限 这个不归我管、那个不归我管，不在其位不谋其政，他忘了机会永远留给有准备的人。 5：抱怨 自己永远是一个受害者，发生事情永远是别人的原因，整天怨天尤人，慢慢的失去了解决问题的能力，幸福快乐都离他而去。 6：自以为是 谁的意见都听不进去，总是觉得自己是对的，慢慢的谁都不再给他提意见，再也听不到真话的同时，只能自己慢慢成长。 7：不自信 你不相信的东西永远不会全力以赴的去争取。一切随缘，顺其自然。 8：怕犯错 怕犯错的人不敢去做更多的事，出了错第一时间先给自己找理由找借口，失去了很多次尝试的机会，没有结果意识，经常为了对和错争论的面红耳赤。 9：懒惰 不想干，也不愿意去想，安于现状、与世无争、承受不了压力，只想不劳而获，每天做着美梦，温水煮青蛙，这种人是舒服死的。提醒自己全力以赴。 什么是奋斗？ 奋斗就是每一天都很难， 可一年一年却越来越容易！ 不奋斗就是每一天都很容易， 可一年一年却越来越难！ 拼一个春夏秋冬， 赢一个无悔人生， 我可以接受失败， 不能接受从来没有奋斗过！ 跟谁混很重要 “沙子是废物，水泥也是废物，但他们混在一起是混凝土，就是精品；大米是精品，汽油也是精品，但他们混在一起就是废物。 是精品还是废物不重要，跟谁混，很重要！ ” 朋友不是乱 交的，每天在一起喝酒的不一定是真朋友，每天在一起混的也不一定是永远的朋友。 未来十年拼什么?一：整；资源整合！ 你能整合多少资源，多少渠道，你将来就会得到多少财富！ 二：借；造船过河不如借船过河。 趋势，无法阻挡； 抉择，要有智慧！ 三：学；今天的企业家，赢在学习，胜在改变！ 案例： ①；1991年，跨国巨头柯达在技术上领先同行十年，但却在2012年1月申请破产。 ②；昔日手机霸主，诺基亚风雨飘摇濒临倒闭。 ③；自2003年，便赋闲不再学习的李宁，于去年7月10日，出售了香港豪宅，被迫二度岀山。不知高龄的李宁能否力挽狂澜，拯救岌岌可危的“李宁”? 古人云：富不学富不长，穷不学穷不尽！ 四：变；要想改变口袋，先要改变脑袋！ 这个社会一直在淘汰有学历的人，但是不会淘汰有学习力愿意改变的人！ 读万卷书不如行万里路， 行万里路不如阅人无数， 阅人无数不如名师指路， 【不要等到明天】1.改变一种行为不要拖到明天，否则它会变成你的习惯。2.拒绝一份诱惑不要拖到明天，否则它会造成你的伤害。3.抓住一次机会不要拖到明天，否则失去了就不会再来。4.不要让今天的行动拖到明天，否则它无法带来精彩。5.不要把今天的幸福拖到明天，否则它将一去不复返。6.不要把机会拖到明天，因机会是唯一的你还要等到明天吗？","link":"/Life/yidianyidi-1701201433.html"},{"title":"搬瓦工VPS方案分享","text":"&emsp;&emsp;搬瓦工VPS，从2013年发展至今，从开始提供年付低至3.99美元便宜VPS主机开始，掀起VPS主机低价狂潮。那时候，我们可以看到根据内存和流量的区别分为64MB、96MB、128MB、512MB以及1024MB内存方案。但是，从2018年开始，商家开始逐渐转型，陆续关闭和下架低配置和低价格方案，开始以优化线路和速度，以及稳定服务器服务为主要特点。 &emsp;&emsp;从2019年开始，商家更加是取消低于年付20美元的方案。如果说以后我们需要在搬瓦工VPS主机商选择低价格VPS主机，应该成为往事。从2019年开始，商家应该会从稳定和线路和性价比服务商提高优势，我们一起期待吧。 搬瓦工VPS方案分享&emsp;&emsp;搬瓦工VPS，全部采用KVM架构的Linux系统环境，支持CentOS、Debian、Ubuntu等多个常见系统版本。且不限制重装系统次数（有些商家每天/每月都有限制安装次数的），这样对于新手学习VPS，有需要多次安装是一个不错的选择。商家之前是有提供OPENVZ架构的，但是从2019年开始，都直接下架且已有用户选择的到期将无法续费。 Tip：所有系统中只能Linux系统，不可以选择Windows系统，我们可以自己安装VNC桌面。&emsp;&emsp;我们可以根据实际的需要选择适合自己的配置，包括内存、硬盘、线路等方案。在这篇文章中，我们 搬瓦工VPS分享网将会定期整理最新的搬瓦工VPS主机配置，包括有补货库存的，包括有最新特价活动的，我们都将会更新出来。如果有需要的网友可以收藏我们网站或者收藏本页面。 20GB KVM VPS 40GB KVM VPS 49.99美元/月 52.99 美元/半年，99.99 美元/年 CPU：1x Intel Xeon CPU：1x Intel Xeon 内存：1024 MB 内存：2GB 硬盘：20 GB SSD 硬盘：40GB SSD 流量：1 TB/月 流量：2 TB/月 带宽：1Gbps 带宽：1Gbps 机房：洛杉矶CN2 机房：洛杉矶CN2 直接购买 直接购买 80GB KVM VPS 160GB KVM VPS 59.99美元/季度，199.99 美元/年 39.99美元/月，399.99 美元/年 CPU：4x Intel Xeon CPU：5x Intel Xeon 内存：4GB 内存：8GB 硬盘：80GB SSD 硬盘：160GB SSD 流量：3 TB/月 流量：4 TB/月 带宽：1Gbps 带宽：1 Gbps 机房：洛杉矶CN2 机房：洛杉矶CN2 直接购买 直接购买 320GB KVM VPS 480GB KVM VPS 59.99美元/季度，199.99 美元/年 119.99美元/月，1199.99 美元/年 CPU：6x Intel Xeon CPU：7x Intel Xeon 内存：16GB 内存：24GB 硬盘：320GB SSD 硬盘：480GB SSD 流量：5 TB/月 流量：6 TB/月 带宽：1Gbps 带宽：1 Gbps 机房：洛杉矶CN2 机房：洛杉矶CN2 直接购买 直接购买 Tip：选择合适自己的VPS方案。搬瓦工VPS任何方案都支持无限次重装系统。 搬瓦工VPS选择建议1、根据速度选择 如果我们追求VPS主机速度，在搬瓦工已有的四种配置中我们可以从速度区分。分别是 香港机房、洛杉矶CN2 GIA、洛杉矶CN2 GT、普通机房。不过价格上需要根据我们实际的预算选择。 2、根据功能选择 目前，搬瓦工VPS主机只有Linux系统。我们在选择VPS主机的时候一般用于建站、调制软件程序、自己配置环境测试使用的，包括我们还有很多用于外贸业务的。总之，我们根据自己需要的选择配置和机房，对于建站我建议是需要至少1GB内存的，一般我们安装面板的话最好是需要这个内存起步。如果是普通的软件测试，不在乎内存的话无所谓，目前最低是512MB内存。 3、根据需求项目周期 虽然搬瓦工VPS新注册用户支持新订单30天内可以无条件退款，但是老用户或者超过30天是不允许退款的。我们有些项目是短期使用的，我们可以选择月付方式。当然，如果需要多机房的，我们可以选择CN2 GIA，这样可以切换的机房比一般普通机房是多一些的。如果需要多机房，那不建议选香港机房，因为香港机房不可以切换。 总结，任何商家都有优势和缺点，搬瓦工VPS主机商家也一样的。比如我们可以看到原来低价的搬瓦工Bandwagonhost已经不再低价，但是相反的我们可以看到配置与性能的提高。","link":"/vps/yidianyidi-201908211001.html"}],"tags":[{"name":"WebService","slug":"WebService","link":"/tags/WebService/"},{"name":"bandwagong","slug":"bandwagong","link":"/tags/bandwagong/"},{"name":"winfrom","slug":"winfrom","link":"/tags/winfrom/"},{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"DataGridView","slug":"DataGridView","link":"/tags/DataGridView/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"theme","slug":"theme","link":"/tags/theme/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Hexo SEO","slug":"Hexo-SEO","link":"/tags/Hexo-SEO/"},{"name":"SqlServer","slug":"SqlServer","link":"/tags/SqlServer/"},{"name":"vs2015","slug":"vs2015","link":"/tags/vs2015/"},{"name":"IIS Express","slug":"IIS-Express","link":"/tags/IIS-Express/"},{"name":"VirtualBox","slug":"VirtualBox","link":"/tags/VirtualBox/"},{"name":"计算机","slug":"计算机","link":"/tags/计算机/"},{"name":"adobe","slug":"adobe","link":"/tags/adobe/"},{"name":"centos","slug":"centos","link":"/tags/centos/"},{"name":"docker 端口映射","slug":"docker-端口映射","link":"/tags/docker-端口映射/"},{"name":"docker 安装","slug":"docker-安装","link":"/tags/docker-安装/"},{"name":"rdlc","slug":"rdlc","link":"/tags/rdlc/"},{"name":"Visual Studio","slug":"Visual-Studio","link":"/tags/Visual-Studio/"},{"name":"github.com","slug":"github-com","link":"/tags/github-com/"},{"name":"git.oschina.net","slug":"git-oschina-net","link":"/tags/git-oschina-net/"},{"name":"vpn","slug":"vpn","link":"/tags/vpn/"},{"name":"责任","slug":"责任","link":"/tags/责任/"},{"name":"自律","slug":"自律","link":"/tags/自律/"},{"name":"bwg bandwagongHost","slug":"bwg-bandwagongHost","link":"/tags/bwg-bandwagongHost/"}],"categories":[{"name":"C#","slug":"C-sharp","link":"/categories/C-sharp/"},{"name":"vps bwg","slug":"vps-bwg","link":"/categories/vps-bwg/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"数据库","slug":"DataBase","link":"/categories/DataBase/"},{"name":"VirtualBox","slug":"VirtualBox","link":"/categories/VirtualBox/"},{"name":"linux","slug":"linux","link":"/categories/linux/"},{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"计算机","slug":"Computer","link":"/categories/Computer/"},{"name":"生活日志","slug":"Life","link":"/categories/Life/"},{"name":"vps","slug":"vps","link":"/categories/vps/"}]}